services:
  # 主开发容器
  app:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - ../.env
    volumes:
      - ..:/workspace:cached
      # 缓存卷以提高性能 - 如需启用请确保权限配置正确
      # - quick-code-node_modules:/workspace/user-frontend/node_modules:delegated
      # - quick-code-admin-node_modules:/workspace/admin-frontend/node_modules:delegated
      - quick-code-maven-cache:/home/vscode/.m2
      # Augment AI 上下文持久化
      - quick-code-augment-context:/home/vscode/.augment
      # VSCode Server 数据持久化
      - quick-code-vscode-server:/home/vscode/.vscode-server
      # VSCode 用户配置持久化
      - quick-code-vscode-config:/home/vscode/.config
    working_dir: /workspace
    command: sleep infinity
    # 移除用户权限配置，使用Dockerfile中的默认vscode用户
    # user: "1000:1000"
    environment:
      # 数据库配置
      - DB_HOST=${DB_HOST:-mysql}
      - DB_PORT=${DB_PORT:-3306}
      - DB_NAME=${DB_NAME:-quick_code}
      - DB_USERNAME=${DB_USERNAME:-quick_code_user}
      - DB_PASSWORD=${DB_PASSWORD:-quick_code_pass}

      # Redis配置
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_pass}
      - REDIS_DATABASE=${REDIS_DATABASE:-0}

      # MinIO配置
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-minio:9000}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin123}
      - MINIO_BUCKET=${MINIO_BUCKET:-quick-code-files}

      # 应用配置
      - APP_NAME=${APP_NAME:-速码网}
      - APP_ENV=${APP_ENV:-development}
      - APP_DEBUG=${APP_DEBUG:-true}
      - APP_BASE_URL=${APP_BASE_URL:-http://localhost:8080}
      - APP_FRONTEND_URL=${APP_FRONTEND_URL:-http://localhost:3000}
      - APP_ADMIN_URL=${APP_ADMIN_URL:-http://localhost:3001}
      - SPRING_PROFILES_ACTIVE=dev

      # 安全配置
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret-key-change-in-production}
      - JWT_EXPIRE_HOURS=${JWT_EXPIRE_HOURS:-24}

      # 业务配置
      - POINT_REGISTER_REWARD=${POINT_REGISTER_REWARD:-100}
      - POINT_UPLOAD_REWARD=${POINT_UPLOAD_REWARD:-100}
      - POINT_DOCKER_BONUS=${POINT_DOCKER_BONUS:-100}
      - AUTO_APPROVE_PROJECTS=${AUTO_APPROVE_PROJECTS:-false}

      # 前端配置
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8080}
      - VITE_WS_URL=${VITE_WS_URL:-ws://localhost:8080/ws}
      - VITE_ENABLE_MOCK=${VITE_ENABLE_MOCK:-false}
      - VITE_ENABLE_DEVTOOLS=${VITE_ENABLE_DEVTOOLS:-true}

      # 开发环境特定配置
      - DEV_MODE=${DEV_MODE:-true}
      - HOT_RELOAD=${HOT_RELOAD:-true}
      - DEBUG_SQL=${DEBUG_SQL:-true}
      - DEBUG_API=${DEBUG_API:-true}
    depends_on:
      - mysql
      - redis
      - minio
    networks:
      - quick-code-network
    ports:
      - "3000:3000"   # 用户端前端
      - "3001:3001"   # 管理后台前端
      - "8080:8080"   # 后端API# Vite开发服务器备用端口

  # MySQL数据库
  mysql:
    image: mysql:8.0
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root_password}
      MYSQL_DATABASE: ${DB_NAME:-quick_code}
      MYSQL_USER: ${DB_USERNAME:-quick_code_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-quick_code_pass}
    volumes:
      - mysql-data:/var/lib/mysql
      - ./scripts/mysql-init:/docker-entrypoint-initdb.d:ro
    ports:
      - "3306:3306"
    networks:
      - quick-code-network
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=256M
      --max-connections=200

  # Redis缓存
  redis:
    image: redis:7.0-alpine
    restart: unless-stopped
    env_file:
      - ../.env
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_pass} --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - quick-code-network

  # MinIO对象存储
  minio:
    image: minio/minio:latest
    restart: unless-stopped
    env_file:
      - ../.env
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin123}
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"   # API端口
      - "9001:9001"   # 控制台端口
    networks:
      - quick-code-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # RabbitMQ消息队列（可选）
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq_user
      RABBITMQ_DEFAULT_PASS: rabbitmq_pass
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    ports:
      - "5672:5672"   # AMQP端口
      - "15672:15672" # 管理界面端口
    networks:
      - quick-code-network

  # Elasticsearch（可选，用于搜索功能）
  elasticsearch:
    image: elasticsearch:8.11.0
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - quick-code-network
    profiles:
      - search  # 使用profile控制是否启动

  # Kibana（可选，ES可视化界面）
  kibana:
    image: kibana:8.11.0
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - quick-code-network
    depends_on:
      - elasticsearch
    profiles:
      - search  # 使用profile控制是否启动

# 网络配置
networks:
  quick-code-network:
    driver: bridge

# 数据卷
volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local
  rabbitmq-data:
    driver: local
  elasticsearch-data:
    driver: local
  # 缓存卷
  quick-code-node_modules:
    driver: local
  quick-code-admin-node_modules:
    driver: local
  quick-code-maven-cache:
    driver: local
  # Augment AI 和开发环境持久化卷
  quick-code-augment-context:
    driver: local
  quick-code-vscode-server:
    driver: local
  quick-code-vscode-config:
    driver: local
