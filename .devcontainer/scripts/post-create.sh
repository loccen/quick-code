#!/bin/bash

# ÈÄüÁ†ÅÁΩëÂºÄÂèëÁéØÂ¢É - ÂÆπÂô®ÂàõÂª∫ÂêéÊâßË°åËÑöÊú¨
# Ê≠§ËÑöÊú¨Âú®devcontainerÂàõÂª∫ÂêéÊâßË°å‰∏ÄÊ¨°ÔºåÁî®‰∫éÂàùÂßãÂåñÂºÄÂèëÁéØÂ¢É

set -e

echo "üöÄ ÂºÄÂßãÂàùÂßãÂåñÈÄüÁ†ÅÁΩëÂºÄÂèëÁéØÂ¢É..."

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Êó•ÂøóÂáΩÊï∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Ê£ÄÊü•Âπ∂ÂàõÂª∫È°πÁõÆÁõÆÂΩïÁªìÊûÑ
create_project_structure() {
    log_info "ÂàõÂª∫È°πÁõÆÁõÆÂΩïÁªìÊûÑ..."
    
    # ÂàõÂª∫‰∏ªË¶ÅÁõÆÂΩï
    mkdir -p user-frontend
    mkdir -p admin-frontend
    mkdir -p backend
    mkdir -p shared
    mkdir -p scripts
    mkdir -p docker
    mkdir -p docs/api
    mkdir -p docs/deployment
    
    log_success "È°πÁõÆÁõÆÂΩïÁªìÊûÑÂàõÂª∫ÂÆåÊàê"
}

# ÂàùÂßãÂåñÂâçÁ´ØÈ°πÁõÆ
init_frontend_projects() {
    log_info "Ê£ÄÊü•ÂâçÁ´ØÈ°πÁõÆ..."
    
    # Ê£ÄÊü•Áî®Êà∑Á´ØÂâçÁ´Ø
    if [ ! -f "user-frontend/package.json" ]; then
        log_info "ÂàùÂßãÂåñÁî®Êà∑Á´ØÂâçÁ´ØÈ°πÁõÆ..."
        cd user-frontend
        npm create vue@latest . -- --typescript --router --pinia --eslint --prettier
        cd ..
        log_success "Áî®Êà∑Á´ØÂâçÁ´ØÈ°πÁõÆÂàùÂßãÂåñÂÆåÊàê"
    else
        log_info "Áî®Êà∑Á´ØÂâçÁ´ØÈ°πÁõÆÂ∑≤Â≠òÂú®ÔºåË∑≥ËøáÂàùÂßãÂåñ"
    fi
    
    # Ê£ÄÊü•ÁÆ°ÁêÜÂêéÂè∞ÂâçÁ´Ø
    if [ ! -f "admin-frontend/package.json" ]; then
        log_info "ÂàùÂßãÂåñÁÆ°ÁêÜÂêéÂè∞ÂâçÁ´ØÈ°πÁõÆ..."
        cd admin-frontend
        npm create vue@latest . -- --typescript --router --pinia --eslint --prettier
        cd ..
        log_success "ÁÆ°ÁêÜÂêéÂè∞ÂâçÁ´ØÈ°πÁõÆÂàùÂßãÂåñÂÆåÊàê"
    else
        log_info "ÁÆ°ÁêÜÂêéÂè∞ÂâçÁ´ØÈ°πÁõÆÂ∑≤Â≠òÂú®ÔºåË∑≥ËøáÂàùÂßãÂåñ"
    fi
}

# ÂàùÂßãÂåñÂêéÁ´ØÈ°πÁõÆ
init_backend_project() {
    log_info "Ê£ÄÊü•ÂêéÁ´ØÈ°πÁõÆ..."
    
    if [ ! -f "backend/pom.xml" ]; then
        log_info "ÂàõÂª∫Spring BootÂêéÁ´ØÈ°πÁõÆÁªìÊûÑ..."
        cd backend
        
        # ÂàõÂª∫MavenÈ°πÁõÆÁªìÊûÑ
        mkdir -p src/main/java/com/quickcode
        mkdir -p src/main/resources
        mkdir -p src/test/java/com/quickcode
        
        # ÂàõÂª∫Âü∫Á°ÄÁöÑpom.xml
        cat > pom.xml << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/>
    </parent>
    
    <groupId>com.quickcode</groupId>
    <artifactId>quick-code-backend</artifactId>
    <version>1.0.0</version>
    <name>quick-code-backend</name>
    <description>ÈÄüÁ†ÅÁΩëÂêéÁ´ØÊúçÂä°</description>
    
    <properties>
        <java.version>17</java.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
EOF
        
        cd ..
        log_success "ÂêéÁ´ØÈ°πÁõÆÁªìÊûÑÂàõÂª∫ÂÆåÊàê"
    else
        log_info "ÂêéÁ´ØÈ°πÁõÆÂ∑≤Â≠òÂú®ÔºåË∑≥ËøáÂàùÂßãÂåñ"
    fi
}

# ÂÆâË£Ö‰æùËµñ
install_dependencies() {
    log_info "ÂÆâË£ÖÈ°πÁõÆ‰æùËµñ..."
    
    # ÂÆâË£ÖÁî®Êà∑Á´ØÂâçÁ´Ø‰æùËµñ
    if [ -f "user-frontend/package.json" ]; then
        log_info "ÂÆâË£ÖÁî®Êà∑Á´ØÂâçÁ´Ø‰æùËµñ..."
        cd user-frontend
        npm install
        cd ..
        log_success "Áî®Êà∑Á´ØÂâçÁ´Ø‰æùËµñÂÆâË£ÖÂÆåÊàê"
    fi
    
    # ÂÆâË£ÖÁÆ°ÁêÜÂêéÂè∞ÂâçÁ´Ø‰æùËµñ
    if [ -f "admin-frontend/package.json" ]; then
        log_info "ÂÆâË£ÖÁÆ°ÁêÜÂêéÂè∞ÂâçÁ´Ø‰æùËµñ..."
        cd admin-frontend
        npm install
        cd ..
        log_success "ÁÆ°ÁêÜÂêéÂè∞ÂâçÁ´Ø‰æùËµñÂÆâË£ÖÂÆåÊàê"
    fi
    
    # ‰∏ãËΩΩMaven‰æùËµñ
    if [ -f "backend/pom.xml" ]; then
        log_info "‰∏ãËΩΩÂêéÁ´ØMaven‰æùËµñ..."
        cd backend
        mvn dependency:resolve
        cd ..
        log_success "ÂêéÁ´ØMaven‰æùËµñ‰∏ãËΩΩÂÆåÊàê"
    fi
}

# ÈÖçÁΩÆGit
configure_git() {
    log_info "ÈÖçÁΩÆGit..."
    
    # ËÆæÁΩÆGitÈÖçÁΩÆÔºàÂ¶ÇÊûúËøòÊ≤°ÊúâÈÖçÁΩÆÔºâ
    if [ -z "$(git config --global user.name)" ]; then
        git config --global user.name "Developer"
        git config --global user.email "developer@quickcode.com"
        log_info "Â∑≤ËÆæÁΩÆÈªòËÆ§GitÁî®Êà∑‰ø°ÊÅØÔºåËØ∑Ê†πÊçÆÈúÄË¶Å‰øÆÊîπ"
    fi
    
    # ËÆæÁΩÆGitÂà´Âêç
    git config --global alias.st status
    git config --global alias.co checkout
    git config --global alias.br branch
    git config --global alias.ci commit
    git config --global alias.unstage 'reset HEAD --'
    git config --global alias.last 'log -1 HEAD'
    git config --global alias.visual '!gitk'
    
    log_success "GitÈÖçÁΩÆÂÆåÊàê"
}

# ÂàõÂª∫ÂºÄÂèëËÑöÊú¨
create_dev_scripts() {
    log_info "ÂàõÂª∫ÂºÄÂèëËÑöÊú¨..."
    
    # ÂàõÂª∫scriptsÁõÆÂΩï
    mkdir -p scripts
    
    # ÂàõÂª∫ÂêØÂä®ËÑöÊú¨
    cat > scripts/start-dev.sh << 'EOF'
#!/bin/bash
# ÂêØÂä®ÂºÄÂèëÁéØÂ¢É

echo "üöÄ ÂêØÂä®ÈÄüÁ†ÅÁΩëÂºÄÂèëÁéØÂ¢É..."

# ÂêØÂä®Áî®Êà∑Á´ØÂâçÁ´Ø
if [ -f "user-frontend/package.json" ]; then
    echo "ÂêØÂä®Áî®Êà∑Á´ØÂâçÁ´Ø..."
    cd user-frontend
    npm run dev &
    cd ..
fi

# ÂêØÂä®ÁÆ°ÁêÜÂêéÂè∞ÂâçÁ´Ø
if [ -f "admin-frontend/package.json" ]; then
    echo "ÂêØÂä®ÁÆ°ÁêÜÂêéÂè∞ÂâçÁ´Ø..."
    cd admin-frontend
    npm run dev -- --port 3001 &
    cd ..
fi

# ÂêØÂä®ÂêéÁ´ØÊúçÂä°
if [ -f "backend/pom.xml" ]; then
    echo "ÂêØÂä®ÂêéÁ´ØÊúçÂä°..."
    cd backend
    mvn spring-boot:run &
    cd ..
fi

echo "‚úÖ ÂºÄÂèëÁéØÂ¢ÉÂêØÂä®ÂÆåÊàêÔºÅ"
echo "Áî®Êà∑Á´ØÂâçÁ´Ø: http://localhost:3000"
echo "ÁÆ°ÁêÜÂêéÂè∞ÂâçÁ´Ø: http://localhost:3001"
echo "ÂêéÁ´ØAPI: http://localhost:8080"
EOF
    
    chmod +x scripts/start-dev.sh
    
    log_success "ÂºÄÂèëËÑöÊú¨ÂàõÂª∫ÂÆåÊàê"
}

# ‰∏ªÊâßË°åÊµÅÁ®ã
main() {
    log_info "ÂºÄÂßãÊâßË°åÂÆπÂô®ÂàõÂª∫ÂêéÂàùÂßãÂåñ..."
    
    create_project_structure
    init_frontend_projects
    init_backend_project
    install_dependencies
    configure_git
    create_dev_scripts
    
    log_success "üéâ ÈÄüÁ†ÅÁΩëÂºÄÂèëÁéØÂ¢ÉÂàùÂßãÂåñÂÆåÊàêÔºÅ"
    log_info "‰ΩøÁî® './scripts/start-dev.sh' ÂêØÂä®ÂºÄÂèëÁéØÂ¢É"
    log_info "ÊàñËÄÖÊü•Áúã README.md ‰∫ÜËß£Êõ¥Â§ö‰ΩøÁî®ÊñπÊ≥ï"
}

# ÊâßË°å‰∏ªÂáΩÊï∞
main "$@"
